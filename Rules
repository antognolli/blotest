#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
  def paginate(num)
    l = sorted_articles
    npages = (l.length - 1) / num

    for i in 1..(npages)
      create_old_page "/page/", i, npages, num
    end
  end

  create_base_feed_page "/", "Atom"
  writetags
  paginate @config[:page_size]
end

compile '/css/*/' do
  # don’t filter or layout
end

compile '/js/*/' do
  # don't filter or layout
end

compile '/posts/*/' do
  filter :erb
  filter :colorize_syntax
  filter :kramdown
  layout 'post_layout'
  layout 'default'
end

compile '/posts/*/', :rep => :intro do
  filter :erb
  filter :colorize_syntax
  filter :kramdown
  layout 'post_intro_layout'
end

compile '/preview/*/' do
  filter :erb
  filter :colorize_syntax
  filter :kramdown
  layout 'post_layout'
  layout 'default'
end

compile '/preview/*/', :rep => :home do
  filter :erb
  filter :colorize_syntax
  filter :kramdown
  layout 'post_layout'
end

compile '/*/' do
  filter :erb
  filter :kramdown
  layout 'default'
end

compile '/feed/' do
  filter :erb
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  elsif item[:kind] == "feed"
    filter :erb
  else
    filter :erb
    layout 'default'
  end
end

# Compile introduction for posts, but don't generate html output.
route '/posts/*/', :rep => :home do
  nil
end

route '/posts/*/', :rep => :intro do
  nil
end

route '/preview/*/', :rep => :home do
  nil
end

# route '/tags/*/' do
#   '/tags.html'
# end

route '/js/*/' do
  item.identifier.chop + '.' + item[:extension]
end

route '/css/*/' do
  item.identifier.chop + '.' + item[:extension]
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
